//----------------------------------------------------------------------------------------------------------------------
#include "TestHelpers.hpp"
#include "Components/Configuration/Options.hpp"
#include "Components/Security/Algorithms.hpp"
#include "Components/Security/CipherPackage.hpp"
#include "Components/Security/KeyStore.hpp"
#include "Components/Security/Classical/FiniteFieldDiffieHellmanModel.hpp"
#include "Utilities/BufferPrinter.hpp"
//----------------------------------------------------------------------------------------------------------------------
#include <gtest/gtest.h>
//----------------------------------------------------------------------------------------------------------------------
#include <memory>
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
namespace {
namespace local {
//----------------------------------------------------------------------------------------------------------------------

[[nodiscard]] bool IsFiniteFieldKeyAgreement(std::string const& keyAgreement);

//----------------------------------------------------------------------------------------------------------------------
} // local namespace
//----------------------------------------------------------------------------------------------------------------------
namespace test {
//----------------------------------------------------------------------------------------------------------------------

static inline std::string const KeyAgreementName = "ffdhe-4096";
static inline std::string const CipherName = "aes-256-ctr";
static inline std::string const HashFunctionName = "sha384";

static constexpr std::size_t ExpectedPublicKeySize = 512;

//----------------------------------------------------------------------------------------------------------------------
} // local namespace
} // namespace
//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, ModelSetupTest)
{
    Security::CipherSuite const cipherSuite{ Security::ConfidentialityLevel::High, test::KeyAgreementName, test::CipherName, test::HashFunctionName };
    Security::Classical::FiniteFieldDiffieHellmanModel model;

    EXPECT_FALSE(model.HasSupplementalData()); // The model should not indicate it injects supplemental data into key exchange requests. 
    EXPECT_EQ(model.GetSupplementalDataSize(), std::size_t{0}); // The model should not indicate it injects supplemental data into key exchange requests. 

    EXPECT_TRUE(model.IsKeyAgreementSupported(test::KeyAgreementName)); // The model should support a known key encapsulation algorithm name. 

    auto optPublicKey = model.SetupKeyExchange(cipherSuite);
    ASSERT_TRUE(optPublicKey);
    EXPECT_EQ(optPublicKey->GetSize(), test::ExpectedPublicKeySize); // The size of the public key should be equal to the expected size. 

    Security::KeyStore store{ std::move(*optPublicKey) };
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, ModelComputeSharedSecretWithEmptyPublicKey)
{
    Security::CipherSuite const cipherSuite{ Security::ConfidentialityLevel::High, test::KeyAgreementName, test::CipherName, test::HashFunctionName };
    Security::Classical::FiniteFieldDiffieHellmanModel model;

    EXPECT_TRUE(model.SetupKeyExchange(cipherSuite));
    EXPECT_FALSE(model.ComputeSharedSecret(Security::PublicKey{})); // The model should fail to generate session keys using empty supplementary data.
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, ModelComputeSharedSecretWithSmallPublicKey)
{
    Security::CipherSuite const cipherSuite{ Security::ConfidentialityLevel::High, test::KeyAgreementName, test::CipherName, test::HashFunctionName };
    Security::Classical::FiniteFieldDiffieHellmanModel model;

    EXPECT_TRUE(model.SetupKeyExchange(cipherSuite));

    Security::PublicKey publicKey{ Security::Test::GenerateGarbageData(test::ExpectedPublicKeySize - 1) };
    auto const result = model.ComputeSharedSecret(publicKey);
    EXPECT_FALSE(result);
    EXPECT_FALSE(model.ComputeSharedSecret(publicKey));
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, ModelComputeSharedSecretWithLargePublicKey)
{
    Security::CipherSuite const cipherSuite{ Security::ConfidentialityLevel::High, test::KeyAgreementName, test::CipherName, test::HashFunctionName };
    Security::Classical::FiniteFieldDiffieHellmanModel model;

    EXPECT_TRUE(model.SetupKeyExchange(cipherSuite));

    Security::PublicKey publicKey{ Security::Test::GenerateGarbageData(std::numeric_limits<std::uint16_t>::max()) };
    EXPECT_FALSE(model.ComputeSharedSecret(publicKey));
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, ModelComputeSharedSecretWithEmptySupplementalData)
{
    Security::CipherSuite const cipherSuite{ Security::ConfidentialityLevel::High, test::KeyAgreementName, test::CipherName, test::HashFunctionName };
    Security::Classical::FiniteFieldDiffieHellmanModel model;

    EXPECT_TRUE(model.SetupKeyExchange(cipherSuite));
    EXPECT_FALSE(model.ComputeSharedSecret(Security::SupplementalData{})); // The model should fail to generate session keys using empty supplementary data.
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, ModelComputeSharedSecretWithLargeSupplementalData)
{
    Security::CipherSuite const cipherSuite{ Security::ConfidentialityLevel::High, test::KeyAgreementName, test::CipherName, test::HashFunctionName };
    Security::Classical::FiniteFieldDiffieHellmanModel model;

    EXPECT_TRUE(model.SetupKeyExchange(cipherSuite));

    Security::SupplementalData supplementalData{ Security::Test::GenerateGarbageData(std::numeric_limits<std::uint16_t>::max()) };
    EXPECT_FALSE(model.ComputeSharedSecret(supplementalData));
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, InvalidKeyAgreementTest)
{
    constexpr std::string_view TestInvalidKeyAgreementName = "ecdh-invalid-algorithm";

    Security::CipherSuite const cipherSuite{ Security::ConfidentialityLevel::High, TestInvalidKeyAgreementName, test::CipherName, test::HashFunctionName };
    Security::Classical::FiniteFieldDiffieHellmanModel model;

    EXPECT_FALSE(model.IsKeyAgreementSupported(std::string{ TestInvalidKeyAgreementName })); // The model should support a known key encapsulation algorithm name. 

    EXPECT_FALSE(model.SetupKeyExchange(cipherSuite)); // The model should fail to setup in the event an invalid key agreement scheme is used. 
    EXPECT_EQ(model.GetSupplementalDataSize(), std::size_t{0}); // The model should not indicate it injects supplemental data into key exchange requests. 
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, SynchronizationTest)
{
    for (auto const& keyAgreement : Security::SupportedKeyAgreementNames) {
        if (local::IsFiniteFieldKeyAgreement(keyAgreement)) {
            Security::CipherSuite const cipherSuite{ Security::ConfidentialityLevel::High, keyAgreement, test::CipherName, test::HashFunctionName };
    
            Security::Classical::FiniteFieldDiffieHellmanModel initiatorModel;
            auto initiatorKeyStore = [&] () -> Security::KeyStore {
                auto optPublicKey = initiatorModel.SetupKeyExchange(cipherSuite);
                EXPECT_TRUE(optPublicKey);
                return Security::KeyStore{ std::move(*optPublicKey) };
            }();

            Security::Classical::FiniteFieldDiffieHellmanModel acceptorModel;
            auto acceptorKeyStore = [&] () -> Security::KeyStore {
                auto optPublicKey = acceptorModel.SetupKeyExchange(cipherSuite);
                EXPECT_TRUE(optPublicKey);
                return Security::KeyStore{ std::move(*optPublicKey) };
            }();

            auto const initiatorDefaultSalt = initiatorKeyStore.GetSalt();
            auto const acceptorDefaultSalt = acceptorKeyStore.GetSalt();
    
            {
                initiatorKeyStore.SetPeerPublicKey(Security::PublicKey{ acceptorKeyStore.GetPublicKey() });
                initiatorKeyStore.PrependSessionSalt(acceptorDefaultSalt);
            }

            {
                acceptorKeyStore.SetPeerPublicKey(Security::PublicKey{ initiatorKeyStore.GetPublicKey() });
                acceptorKeyStore.AppendSessionSalt(initiatorDefaultSalt);
            }

            auto const optInitiatorResult = initiatorModel.ComputeSharedSecret(*initiatorKeyStore.GetPeerPublicKey());
            ASSERT_TRUE(optInitiatorResult);

            auto const& [initiatorSharedSecret, initiatorSupplementalData] = *optInitiatorResult;
            EXPECT_FALSE(initiatorSharedSecret.IsEmpty());
            EXPECT_TRUE(initiatorSupplementalData.IsEmpty());

            auto const optAcceptorResult = acceptorModel.ComputeSharedSecret(*acceptorKeyStore.GetPeerPublicKey());
            ASSERT_TRUE(optInitiatorResult);

            auto const& [acceptorSharedSecret, acceptorSupplementalData] = *optAcceptorResult;
            EXPECT_FALSE(acceptorSharedSecret.IsEmpty());
            EXPECT_TRUE(acceptorSupplementalData.IsEmpty());

            EXPECT_EQ(initiatorSharedSecret, acceptorSharedSecret);

            auto const optInitiatorVerificationData = initiatorKeyStore.GenerateSessionKeys(
                Security::ExchangeRole::Initiator, cipherSuite, initiatorSharedSecret);
            ASSERT_TRUE(optInitiatorVerificationData);
            EXPECT_TRUE(initiatorKeyStore.HasGeneratedKeys());

            auto const optAcceptorVerificationData = acceptorKeyStore.GenerateSessionKeys(
                Security::ExchangeRole::Acceptor, cipherSuite, acceptorSharedSecret);
            ASSERT_TRUE(optAcceptorVerificationData);
            EXPECT_TRUE(acceptorKeyStore.HasGeneratedKeys());

            EXPECT_EQ(*optInitiatorVerificationData, *optAcceptorVerificationData);

            EXPECT_EQ(initiatorKeyStore.GetPublicKey(), acceptorKeyStore.GetPeerPublicKey());
            EXPECT_EQ(initiatorKeyStore.GetPeerPublicKey(), acceptorKeyStore.GetPublicKey());
            EXPECT_EQ(initiatorKeyStore.GetContentKey(), acceptorKeyStore.GetPeerContentKey());
            EXPECT_EQ(initiatorKeyStore.GetPeerContentKey(), acceptorKeyStore.GetContentKey());
            EXPECT_EQ(initiatorKeyStore.GetSignatureKey(), acceptorKeyStore.GetPeerSignatureKey());
            EXPECT_EQ(initiatorKeyStore.GetPeerSignatureKey(), acceptorKeyStore.GetSignatureKey());
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, SynchronizeWithGarabagePublicKeyTest)
{
    std::unordered_map<std::string, std::vector<std::uint8_t>> garbageData{
        {
            "ffdhe-2048",
            {
              0x55, 0xc5, 0x6f, 0x0e, 0xe4, 0x0b, 0x84, 0x0e, 0x5d, 0xa3, 0xcc, 0x73, 0x43, 0x58, 0xf1, 0xba, 0xc3, 0x0a, 0xaa, 0x3e, 0xa3, 0x50, 0xa3, 0x14, 0x33, 0x5b, 0xa1, 0x04, 0x7c, 0xcb, 0x61, 0xe4, 
              0x80, 0x2b, 0xdf, 0xbc, 0x08, 0xad, 0x0a, 0xfa, 0x6c, 0x61, 0x5f, 0xaa, 0xaa, 0x4c, 0x63, 0xab, 0xd8, 0x2f, 0x20, 0x3b, 0xff, 0x5c, 0x86, 0x93, 0x55, 0x9d, 0x26, 0x74, 0x07, 0xe1, 0x27, 0x6e, 
              0xf7, 0xc1, 0x99, 0x08, 0x4d, 0x7c, 0x4c, 0x7d, 0x56, 0x01, 0xb4, 0x01, 0x9d, 0xb0, 0x6b, 0x62, 0xb4, 0x3d, 0xfd, 0xe4, 0xc0, 0x22, 0x59, 0x33, 0x84, 0x05, 0x69, 0xda, 0xa0, 0x4a, 0x53, 0xc6, 
              0x41, 0x39, 0xdf, 0xde, 0xef, 0x3a, 0xc0, 0xde, 0x62, 0x9f, 0xab, 0x41, 0x9a, 0x44, 0x87, 0x75, 0x12, 0x6f, 0xdc, 0xcc, 0xc3, 0xc8, 0xe2, 0x85, 0xab, 0x82, 0xbf, 0xcf, 0xfa, 0xf0, 0xd8, 0xa5, 
              0x00, 0xbf, 0x67, 0x66, 0x37, 0x36, 0x3b, 0x7a, 0xf4, 0xb3, 0x46, 0x49, 0x95, 0x81, 0x2c, 0x32, 0x51, 0x9a, 0xf2, 0x84, 0xf5, 0x6b, 0xe1, 0x4d, 0xcd, 0xc9, 0x5b, 0xca, 0xc8, 0x5f, 0x11, 0x1d, 
              0x9e, 0xc9, 0x3d, 0x3d, 0xc3, 0x97, 0xf2, 0xc9, 0xc6, 0x69, 0x49, 0xad, 0xb3, 0xaa, 0x85, 0x32, 0x7a, 0xd1, 0x9f, 0xd1, 0xc2, 0xfa, 0x1b, 0x0a, 0xd1, 0xf9, 0x82, 0x90, 0x1a, 0xf4, 0x18, 0xc1, 
              0x76, 0x79, 0xe1, 0x58, 0x39, 0x8b, 0x39, 0x2f, 0x38, 0xd8, 0x80, 0xdd, 0xcb, 0x57, 0x01, 0xa2, 0xd0, 0xa1, 0x2f, 0xf6, 0x82, 0x50, 0x3b, 0xb4, 0x1f, 0xc6, 0x59, 0xc0, 0x3d, 0x69, 0x14, 0xad, 
              0x77, 0xef, 0x1e, 0x55, 0x96, 0x9b, 0x39, 0x5b, 0x7c, 0x20, 0x8f, 0x22, 0x60, 0x53, 0x1d, 0x2a, 0x08, 0xcf, 0x57, 0xbe, 0xf8, 0xb2, 0xc9, 0x71, 0x4e, 0x7f, 0x65, 0x5d, 0x66, 0xe5, 0xb3, 0x50, 
            }
        },
        {
            "ffdhe-3072",
            {
                0xd7, 0xc7, 0xe2, 0x85, 0xfc, 0x77, 0x8e, 0x98, 0xee, 0xbe, 0x89, 0x88, 0xfe, 0x04, 0xf6, 0x57, 0xb3, 0x5f, 0x29, 0x22, 0x33, 0xc9, 0xc8, 0x23, 0x0c, 0x60, 0xd1, 0xe4, 0x53, 0x38, 0x03, 0xcb,
                0xf2, 0x88, 0x69, 0xe9, 0xb1, 0x60, 0xca, 0xa1, 0xd0, 0xa9, 0x03, 0x92, 0xd8, 0x42, 0x51, 0x9a, 0xb5, 0x76, 0xb2, 0xb4, 0xf1, 0x21, 0xcb, 0x0a, 0x92, 0xde, 0x10, 0x94, 0x84, 0x73, 0xdb, 0x7e,
                0x14, 0x56, 0xc7, 0xc3, 0xec, 0xa9, 0x79, 0x7e, 0x37, 0x9b, 0xbe, 0x80, 0x3e, 0x80, 0x02, 0x8f, 0x28, 0x3e, 0x70, 0x08, 0xff, 0x97, 0x18, 0x2c, 0x4b, 0x1f, 0x34, 0x62, 0xc4, 0x36, 0x74, 0x7c,
                0x80, 0xc1, 0x45, 0x92, 0xa8, 0xc8, 0x0d, 0xca, 0x27, 0x32, 0xbf, 0x57, 0xcf, 0x69, 0x18, 0x8a, 0x49, 0xd1, 0xd7, 0x2e, 0x7b, 0xc9, 0xba, 0xf2, 0x2a, 0x23, 0x3d, 0x8d, 0x4f, 0x50, 0x5d, 0xa7,
                0xee, 0x24, 0x38, 0x5f, 0x20, 0x6b, 0xe6, 0x64, 0xb4, 0x42, 0xd7, 0x57, 0xf2, 0x28, 0xa5, 0xae, 0x83, 0xac, 0x0e, 0x5b, 0x6b, 0x4e, 0x80, 0xb5, 0x50, 0x30, 0xa0, 0x01, 0xf5, 0x9f, 0x49, 0xc7,
                0x23, 0x77, 0x6f, 0x73, 0xdd, 0x89, 0x80, 0xec, 0xdb, 0x67, 0xcf, 0x59, 0x57, 0x76, 0x42, 0x2f, 0x7f, 0xcd, 0x77, 0x7e, 0x96, 0xc5, 0x3e, 0x95, 0xab, 0x69, 0x6a, 0x23, 0x4b, 0xa3, 0xb6, 0x17,
                0x30, 0xc9, 0x2d, 0x9b, 0x88, 0x06, 0xe4, 0x96, 0x9e, 0xcd, 0x12, 0x5b, 0xc1, 0x8b, 0xc1, 0x3e, 0xb1, 0x9a, 0xed, 0x9e, 0xea, 0x50, 0x5e, 0xdc, 0x50, 0xc2, 0xf0, 0xcb, 0x42, 0xa9, 0x41, 0xc8,
                0x1d, 0x79, 0x4d, 0x82, 0x92, 0x27, 0x87, 0xe0, 0x82, 0x61, 0xc6, 0x25, 0xbf, 0xa7, 0x27, 0x6b, 0x87, 0x0c, 0xcc, 0x86, 0xa7, 0x7b, 0xe0, 0x14, 0x70, 0x51, 0xd3, 0x9e, 0x02, 0xba, 0xdc, 0xb9,
                0x0f, 0x88, 0x2a, 0x17, 0xa1, 0x17, 0x58, 0x82, 0x98, 0xda, 0x3c, 0xdb, 0x98, 0xf5, 0x14, 0x09, 0xe4, 0xfd, 0x00, 0xb6, 0x89, 0xd1, 0x8c, 0xc4, 0xd6, 0x11, 0xbd, 0xfd, 0x3f, 0xd1, 0xea, 0xf4,
                0xc3, 0x90, 0x23, 0x28, 0x0d, 0xe5, 0xad, 0xae, 0xbc, 0xa8, 0x22, 0x09, 0xe3, 0xa2, 0x19, 0xa4, 0xe8, 0x48, 0x0e, 0x6a, 0x69, 0x96, 0x32, 0xb4, 0x85, 0xe2, 0xe4, 0x71, 0xd1, 0xf9, 0x7f, 0xdb,
                0xb3, 0xd7, 0xf1, 0xef, 0x2e, 0xd0, 0x03, 0x8f, 0x45, 0x0b, 0x5c, 0xa7, 0x66, 0x85, 0x70, 0x4c, 0x6f, 0xc9, 0xc7, 0xc1, 0xfe, 0xe7, 0x7b, 0x1c, 0x0b, 0x7c, 0x8a, 0xf2, 0x9d, 0x90, 0x90, 0xc7,
                0xec, 0x92, 0xc8, 0x48, 0xd8, 0x5a, 0x89, 0x88, 0xbd, 0x4e, 0x0f, 0x65, 0xdd, 0x27, 0xfc, 0x87, 0x20, 0x2b, 0x55, 0x28, 0xc8, 0xbf, 0x93, 0xc0, 0x77, 0xe9, 0xec, 0xef, 0x4c, 0x13, 0xe3, 0xe9
            }
        },
        {
            "ffdhe-4096",
            {
                0xce, 0x1c, 0x7a, 0xd1, 0xa8, 0x8c, 0xde, 0xb1, 0xa1, 0x8a, 0xd1, 0x77, 0x0b, 0x33, 0x67, 0x86, 0xf5, 0x8f, 0x96, 0x0a, 0xf5, 0x11, 0xc9, 0xc1, 0x1c, 0xf5, 0x23, 0x39, 0x09, 0x32, 0xa7, 0x67,
                0x16, 0x4a, 0xae, 0x77, 0x3a, 0xd1, 0xfa, 0x1c, 0x31, 0x88, 0x53, 0x69, 0xab, 0x0f, 0x65, 0x35, 0x6f, 0x61, 0x67, 0x32, 0xe0, 0xc1, 0x92, 0x43, 0xe3, 0xd7, 0xda, 0x19, 0x20, 0x49, 0x2e, 0x69,
                0xf7, 0xae, 0x16, 0xf3, 0x59, 0x29, 0x78, 0xc9, 0xe9, 0x14, 0xfc, 0x8b, 0x73, 0xa6, 0x07, 0x12, 0x6b, 0x8d, 0xa2, 0x73, 0x9e, 0xba, 0x7e, 0xe1, 0x15, 0x52, 0x50, 0x24, 0x83, 0x91, 0x5e, 0x50,
                0x4d, 0xe2, 0xad, 0x9d, 0xa6, 0xa7, 0x90, 0xad, 0x80, 0x40, 0xa6, 0xeb, 0x17, 0xb7, 0x91, 0xd8, 0x22, 0xe0, 0x3f, 0xaa, 0x5c, 0x4b, 0xb1, 0x01, 0x6c, 0x48, 0xfa, 0x40, 0x2d, 0xda, 0x0f, 0xd2,
                0xdd, 0x98, 0xf1, 0x90, 0x75, 0x6a, 0x89, 0x1e, 0x0d, 0xd6, 0x4f, 0xce, 0xf7, 0x6b, 0xbb, 0xf9, 0xa4, 0xd8, 0x95, 0x45, 0x08, 0x43, 0x25, 0x13, 0x1a, 0x56, 0x34, 0xd5, 0x8e, 0x74, 0x6c, 0xe4,
                0x6a, 0x5a, 0x6d, 0xa6, 0x50, 0xc4, 0x01, 0x92, 0xd2, 0xd8, 0xfe, 0x64, 0x7e, 0x74, 0x41, 0xac, 0x1a, 0xb6, 0x5b, 0xf6, 0x04, 0x0b, 0xa2, 0x9b, 0x5c, 0x40, 0x95, 0xcf, 0x3d, 0xfe, 0xd8, 0x47,
                0xff, 0x4a, 0x78, 0x22, 0xf3, 0xd4, 0xeb, 0x7a, 0xe2, 0xc5, 0x91, 0xe1, 0xe2, 0x35, 0x41, 0xb9, 0xbe, 0x15, 0xc4, 0x26, 0x62, 0xe0, 0x69, 0x76, 0x99, 0xd5, 0x06, 0xd9, 0xaa, 0xce, 0xf4, 0x70,
                0x7b, 0xfb, 0x61, 0xd3, 0x5a, 0xcf, 0xba, 0x16, 0xbc, 0x91, 0x65, 0xf6, 0xae, 0xdc, 0x81, 0xc1, 0xc1, 0x40, 0x79, 0x15, 0x47, 0xf4, 0x32, 0xe9, 0x75, 0xa8, 0x3c, 0x89, 0xd7, 0x18, 0xd7, 0x25,
                0x30, 0xa1, 0x96, 0x3c, 0x90, 0xd5, 0xd3, 0xd3, 0x2f, 0xfd, 0x55, 0x4e, 0x87, 0x69, 0xb8, 0x3e, 0xee, 0x8f, 0x35, 0x71, 0xe4, 0x1c, 0x4e, 0x88, 0x65, 0x8b, 0x88, 0x00, 0xb5, 0x98, 0x93, 0x2e,
                0x22, 0x5a, 0x81, 0x16, 0x13, 0xcb, 0xf9, 0xcb, 0xc9, 0x81, 0xb9, 0xc5, 0x41, 0xf1, 0x6a, 0x67, 0xa6, 0x61, 0x9f, 0x54, 0x37, 0xa5, 0xdb, 0xe7, 0x29, 0x89, 0xb5, 0x9a, 0x09, 0x3c, 0xa0, 0xc7,
                0x5a, 0x54, 0xc0, 0xb6, 0xb8, 0xa4, 0x06, 0xb7, 0xd3, 0xb2, 0x18, 0x93, 0x04, 0xa3, 0x04, 0xc3, 0x2c, 0x1c, 0xaa, 0xcf, 0x1f, 0x07, 0x71, 0x08, 0xaa, 0xc4, 0xf3, 0x36, 0x50, 0x33, 0xea, 0x28,
                0xa3, 0x82, 0xb3, 0xba, 0x06, 0x2e, 0xf0, 0x76, 0xda, 0xbb, 0xa1, 0x13, 0x24, 0xa3, 0xc3, 0xbf, 0xc2, 0x80, 0xb7, 0x05, 0xa5, 0x23, 0xa4, 0xf7, 0x3b, 0xa9, 0x87, 0x0f, 0xa2, 0x3a, 0x70, 0xcf,
                0xce, 0x0b, 0xcd, 0x2f, 0xd6, 0xdd, 0x0d, 0x5e, 0xd8, 0x8d, 0xcd, 0x0b, 0x1d, 0xf4, 0x5c, 0x65, 0x0e, 0x77, 0x20, 0xd6, 0xb7, 0x8e, 0x22, 0x1f, 0x86, 0x70, 0xc9, 0xab, 0xc6, 0x7a, 0x66, 0xe2,
                0x04, 0xde, 0xe7, 0x28, 0x2f, 0x53, 0x4d, 0x58, 0x5b, 0x99, 0x83, 0xa1, 0x3c, 0x37, 0x76, 0x71, 0x2f, 0x68, 0x4d, 0xd3, 0xf5, 0x2c, 0xe6, 0x37, 0x4c, 0x58, 0x4b, 0x01, 0xeb, 0x1e, 0x14, 0xa1,
                0x78, 0x77, 0x66, 0x4f, 0x7d, 0x5e, 0x67, 0x20, 0x40, 0x30, 0xad, 0xf1, 0x0e, 0x27, 0x55, 0xff, 0xef, 0xaa, 0x54, 0x53, 0xa8, 0xea, 0xa9, 0x45, 0xed, 0x5f, 0x82, 0x74, 0x31, 0x8b, 0xc9, 0xb7,
                0xdf, 0x55, 0x46, 0xd2, 0xa6, 0x64, 0x12, 0x6e, 0xb7, 0x1f, 0xd9, 0xee, 0xc8, 0x79, 0xfa, 0x2a, 0xf4, 0x9f, 0x36, 0x73, 0x42, 0xe3, 0x16, 0xa5, 0xc2, 0x7a, 0x9d, 0xe2, 0x0b, 0x0d, 0x04, 0x51,
            }
        },
        {
            "ffdhe-6144",
            {
                0x78, 0x57, 0x4c, 0x08, 0xab, 0x13, 0x87, 0xab, 0xda, 0x2f, 0x57, 0x51, 0xb2, 0x12, 0xe4, 0x4d, 0xd4, 0x1d, 0xb4, 0xe5, 0x51, 0x72, 0xf3, 0x4b, 0xf2, 0xbb, 0xf4, 0x9d, 0x32, 0x68, 0x7f, 0x53, 
                0x43, 0x1b, 0x2c, 0xda, 0x16, 0x80, 0x1a, 0x88, 0x63, 0x2e, 0x50, 0xc6, 0x4e, 0x29, 0x7b, 0x11, 0x9a, 0x75, 0xf0, 0xd4, 0x36, 0x34, 0x16, 0xd1, 0x8e, 0xe8, 0x33, 0xf4, 0x53, 0x6e, 0xbe, 0xbf, 
                0x08, 0x36, 0x6e, 0x49, 0x1a, 0xbb, 0x12, 0xff, 0x0d, 0xfb, 0x4f, 0x33, 0xfc, 0x43, 0x60, 0x49, 0x36, 0xb6, 0xaa, 0x79, 0xc3, 0x47, 0xb0, 0x16, 0x09, 0xd0, 0x12, 0x5b, 0x75, 0xf6, 0xd3, 0xf2, 
                0x21, 0x30, 0x01, 0xac, 0xdd, 0x9e, 0x07, 0xca, 0x19, 0xf3, 0x7b, 0xba, 0x34, 0xdf, 0x20, 0x7d, 0xee, 0x43, 0xc8, 0x97, 0xaa, 0x9e, 0x33, 0x75, 0x32, 0x44, 0x6f, 0x95, 0x1b, 0x02, 0x80, 0x6c, 
                0x9a, 0xe3, 0x21, 0x3b, 0x75, 0xc8, 0x83, 0x77, 0xb1, 0x2a, 0xf3, 0xdb, 0x2a, 0x51, 0xfd, 0x57, 0x54, 0x17, 0x8a, 0xba, 0xa2, 0x28, 0x24, 0xdb, 0xc9, 0xaf, 0x8d, 0xf7, 0xad, 0x4d, 0x58, 0xd8, 
                0xe8, 0x0f, 0x55, 0x7d, 0xb2, 0x33, 0x39, 0xc8, 0x2f, 0x18, 0x9c, 0xdd, 0xdd, 0xa7, 0x64, 0xdf, 0x28, 0x7f, 0xab, 0x78, 0x25, 0xf8, 0x32, 0x86, 0x0d, 0xca, 0x19, 0x29, 0x4a, 0x96, 0xbf, 0x53, 
                0x48, 0x18, 0xf7, 0x21, 0xba, 0xd4, 0xeb, 0xe6, 0x8d, 0x93, 0x5b, 0x07, 0xcc, 0x4f, 0x5b, 0x6e, 0xce, 0x00, 0x8d, 0x8d, 0x41, 0xa0, 0xc8, 0x45, 0x8b, 0x61, 0x98, 0x26, 0x1f, 0xab, 0x66, 0x12, 
                0xef, 0x95, 0x79, 0xff, 0x04, 0xc4, 0x74, 0xba, 0x49, 0xcb, 0xad, 0xb5, 0x22, 0x61, 0x6c, 0xaa, 0x24, 0xa0, 0x2f, 0x23, 0x9f, 0xe7, 0xc5, 0xfe, 0x2b, 0xfc, 0x70, 0xe6, 0xef, 0x78, 0xc5, 0xa5, 
                0xbd, 0xa4, 0xcf, 0xfb, 0xdf, 0x58, 0x90, 0xea, 0x83, 0xb0, 0x79, 0x97, 0xf1, 0x4f, 0xac, 0xc9, 0x9b, 0x6d, 0xa9, 0x8d, 0x7a, 0x3c, 0xe8, 0x31, 0x5c, 0x28, 0xa0, 0x58, 0x6f, 0xeb, 0xbb, 0x02, 
                0x68, 0xed, 0xc8, 0xd8, 0x89, 0x3b, 0x79, 0x1e, 0x94, 0x51, 0x19, 0x3f, 0xe6, 0x52, 0xd7, 0x80, 0x88, 0x52, 0x1f, 0x32, 0xb0, 0x73, 0x5f, 0x74, 0x3c, 0x6f, 0xaa, 0x9b, 0x6a, 0xa8, 0xdd, 0x49, 
                0x6b, 0xa3, 0x03, 0xc0, 0x92, 0xc0, 0x64, 0x8a, 0x78, 0x7a, 0x25, 0x18, 0x02, 0xf2, 0xd3, 0x15, 0x5b, 0xf4, 0xaa, 0x58, 0x94, 0xd2, 0x55, 0x48, 0xc4, 0xef, 0x07, 0x9f, 0x41, 0x64, 0x79, 0xc7, 
                0xc1, 0xf2, 0xa4, 0x4f, 0x18, 0x38, 0x20, 0x94, 0xa7, 0x45, 0xc3, 0x5b, 0xc3, 0xb0, 0x4f, 0xcd, 0x38, 0x7b, 0x4e, 0x4e, 0x4b, 0xbb, 0x79, 0x00, 0xdd, 0xa0, 0x54, 0xdf, 0xaf, 0xb0, 0x04, 0x7a, 
                0x7f, 0x2d, 0x38, 0xed, 0x24, 0xc6, 0xbe, 0xd5, 0xaa, 0x3c, 0xe9, 0xe6, 0x47, 0x5a, 0xb4, 0x63, 0x4e, 0x2e, 0x35, 0xe4, 0x9b, 0xce, 0x19, 0x5e, 0x94, 0x4f, 0xe3, 0x20, 0x5d, 0x8f, 0x4e, 0x64, 
                0x22, 0x11, 0x5f, 0x60, 0x32, 0x03, 0xc3, 0xc8, 0x82, 0x38, 0xf0, 0x9b, 0x96, 0x96, 0x87, 0xfc, 0xe3, 0x35, 0x04, 0xc4, 0x38, 0x4b, 0x40, 0x41, 0x33, 0x53, 0xad, 0x40, 0xa1, 0x00, 0x83, 0xab, 
                0x79, 0x7e, 0xaf, 0x41, 0x15, 0x67, 0xbe, 0x63, 0xc6, 0x35, 0x72, 0x4d, 0xe3, 0x06, 0x44, 0x48, 0x1b, 0x66, 0xd3, 0x49, 0x7b, 0xae, 0x03, 0x0d, 0x8f, 0xd1, 0xf3, 0x13, 0x16, 0xdf, 0x23, 0x0a, 
                0x3f, 0x6d, 0x07, 0x80, 0xf4, 0x6b, 0xde, 0xcd, 0x0e, 0xf2, 0x34, 0xfb, 0x50, 0x62, 0xbe, 0xbb, 0xd1, 0x25, 0x77, 0xda, 0xa8, 0x47, 0x66, 0x0e, 0xc1, 0x6f, 0x80, 0x68, 0x1d, 0xb8, 0x5e, 0x8a, 
                0x5e, 0x7c, 0x7c, 0xc3, 0x1f, 0x91, 0x7c, 0x03, 0x1a, 0xf9, 0xe9, 0x8c, 0xc1, 0xd0, 0x11, 0xb0, 0xfc, 0x0b, 0xd3, 0x15, 0x36, 0x5d, 0xc9, 0x6c, 0xc4, 0xe1, 0x01, 0x3c, 0x61, 0xf8, 0x83, 0xd8, 
                0x24, 0xea, 0xc0, 0x14, 0x13, 0x71, 0x13, 0x5a, 0x30, 0x23, 0xe4, 0xfb, 0x1b, 0x5e, 0xa7, 0xe0, 0xad, 0xa4, 0xbb, 0x0d, 0xb8, 0xac, 0x90, 0xd1, 0x73, 0x0a, 0xc2, 0xaf, 0x40, 0x14, 0x23, 0x3f, 
                0x31, 0xd5, 0xd5, 0xd4, 0x03, 0xe3, 0x67, 0x88, 0x9f, 0xce, 0x64, 0x3f, 0x60, 0x9d, 0x75, 0xe2, 0xe4, 0x55, 0xc0, 0xe6, 0xf2, 0x87, 0x04, 0x86, 0x9e, 0xa9, 0xbd, 0xef, 0xc8, 0xd7, 0xee, 0x38, 
                0xea, 0x09, 0xd9, 0x58, 0x95, 0x44, 0xb2, 0x9d, 0xbd, 0x74, 0xa8, 0x93, 0xf9, 0xe4, 0x77, 0xf0, 0x95, 0x7b, 0x26, 0x82, 0x44, 0x76, 0x5c, 0xaa, 0xa6, 0x51, 0x13, 0x55, 0x8a, 0xf7, 0x0d, 0x23, 
                0x28, 0xd6, 0x5f, 0xcf, 0x0c, 0x13, 0xd1, 0x44, 0x13, 0x06, 0x8e, 0x52, 0x05, 0x80, 0x83, 0xbe, 0xe0, 0x2c, 0xb2, 0x3c, 0xc2, 0xdf, 0x93, 0x5a, 0x70, 0xb6, 0x30, 0xcd, 0x3f, 0xc4, 0xd6, 0x58, 
                0xef, 0x02, 0x09, 0x83, 0xf4, 0x22, 0x47, 0x80, 0xe3, 0x92, 0x6b, 0xfb, 0xb8, 0x41, 0x59, 0xaf, 0x33, 0x73, 0x67, 0xa5, 0x98, 0x09, 0x84, 0xa5, 0x6a, 0xfb, 0xa9, 0x1a, 0xa7, 0x56, 0x55, 0x40, 
                0x6b, 0x8e, 0x51, 0x60, 0x2a, 0x2b, 0x66, 0x1d, 0xd1, 0xd4, 0x82, 0xdd, 0x0e, 0x02, 0x62, 0x66, 0xdd, 0x70, 0xc7, 0xb8, 0x92, 0x0c, 0xc1, 0x79, 0x6c, 0x89, 0xe8, 0x4b, 0xdf, 0x4b, 0xca, 0xbe, 
                0x0e, 0xad, 0x97, 0x6f, 0x8b, 0x33, 0xf6, 0xc2, 0x62, 0x6a, 0x89, 0xec, 0x55, 0xff, 0x2c, 0xb8, 0xcb, 0x46, 0x0a, 0xde, 0x52, 0x44, 0x79, 0x21, 0xf8, 0xdd, 0x50, 0xae, 0xa4, 0xbe, 0x2c, 0x0a, 
            }
        },
        {
            "ffdhe-8192",
            {
                0x7f, 0x8d, 0x71, 0x3b, 0x8c, 0xab, 0x1b, 0x53, 0xb4, 0xe7, 0xbf, 0x3b, 0x83, 0x9f, 0xc7, 0x11, 0xfa, 0x6a, 0x08, 0x91, 0x8d, 0x94, 0x40, 0x2e, 0xbd, 0xe8, 0x32, 0x51, 0x69, 0x09, 0x9c, 0x1f,
                0x77, 0x24, 0xa4, 0xb2, 0x30, 0xa8, 0x31, 0x5d, 0x50, 0x47, 0xe1, 0x3b, 0x9b, 0x9c, 0x87, 0xc5, 0x93, 0xa4, 0x4b, 0x9e, 0x7e, 0xb5, 0xc4, 0x21, 0x3e, 0xbb, 0xbb, 0xb5, 0x54, 0x3e, 0x17, 0x9a,
                0x5a, 0x5f, 0x76, 0xdf, 0x96, 0x3f, 0xa6, 0x0e, 0x6d, 0x1d, 0x8f, 0x45, 0xdf, 0x9e, 0xad, 0xa8, 0x37, 0xea, 0x67, 0x4f, 0x86, 0x35, 0x5c, 0x72, 0xbd, 0xe9, 0x5d, 0xda, 0x64, 0x71, 0x69, 0xa8,
                0x4a, 0xc2, 0x3d, 0x5d, 0x76, 0x8c, 0x9e, 0xbc, 0xb5, 0xe9, 0x5a, 0x56, 0xb2, 0xfe, 0x81, 0x4e, 0xe4, 0x97, 0x02, 0x5d, 0x93, 0x3c, 0x33, 0x7c, 0x27, 0xf3, 0x40, 0xf2, 0xfe, 0x6f, 0xe2, 0xd4,
                0x2a, 0xf7, 0x9a, 0xc0, 0x30, 0xc7, 0xd7, 0x22, 0x39, 0x72, 0x88, 0xc2, 0x3e, 0x95, 0x7c, 0xb9, 0xf1, 0x80, 0xa7, 0x64, 0x0e, 0x49, 0xf7, 0x76, 0x83, 0x71, 0xe1, 0x45, 0x89, 0x4b, 0xbf, 0xfd,
                0x74, 0x88, 0x8e, 0xdb, 0x24, 0x98, 0xb6, 0x2e, 0x8e, 0xdd, 0xbf, 0x51, 0xc2, 0xf4, 0xed, 0x76, 0x9b, 0x6e, 0x49, 0xe0, 0xb2, 0x47, 0xd9, 0xad, 0xed, 0x71, 0x6a, 0x22, 0xbe, 0xfa, 0x35, 0xbf,
                0x4b, 0x75, 0x36, 0x6e, 0x56, 0x57, 0x2b, 0xc7, 0xdf, 0x13, 0x0a, 0x46, 0xeb, 0xa5, 0xcd, 0xb6, 0x89, 0xbf, 0x1d, 0xd7, 0x24, 0x28, 0xac, 0xc3, 0x7d, 0x5e, 0xd6, 0xb8, 0x7b, 0xa3, 0x4b, 0x51,
                0x6a, 0xa8, 0x5c, 0x39, 0x5e, 0x51, 0xe2, 0x8d, 0x7b, 0xcc, 0x32, 0x97, 0xd1, 0x97, 0x8b, 0x43, 0x43, 0x21, 0x99, 0x14, 0x86, 0x9a, 0x32, 0xa0, 0xc4, 0xb4, 0xd2, 0x7a, 0x74, 0x4b, 0x20, 0xa2,
                0xc8, 0x39, 0x46, 0x68, 0x96, 0x38, 0xd2, 0xc5, 0x5e, 0x68, 0xfd, 0xff, 0x0b, 0xa6, 0x20, 0xd4, 0x5e, 0xf2, 0x11, 0x80, 0xad, 0x53, 0xf6, 0x7d, 0x60, 0xb8, 0x36, 0x53, 0x5b, 0x1c, 0x8d, 0x56,
                0x54, 0x3f, 0x54, 0x75, 0x90, 0x38, 0xe4, 0x63, 0x8d, 0x83, 0x7b, 0xdf, 0x89, 0x48, 0xc0, 0x59, 0xa2, 0x17, 0xe4, 0xb6, 0x74, 0xa1, 0xe4, 0xb6, 0x33, 0xb6, 0x09, 0x92, 0x9b, 0xb0, 0x76, 0xfb,
                0x01, 0x8e, 0xaf, 0x33, 0xe9, 0x1e, 0xf2, 0x47, 0x5c, 0xc5, 0x94, 0x53, 0x12, 0x6d, 0x80, 0x65, 0x87, 0x4a, 0xde, 0x32, 0x3c, 0xc3, 0xff, 0x11, 0xa9, 0xc9, 0x9a, 0x97, 0x9c, 0x32, 0x6f, 0xef,
                0xfc, 0x72, 0x33, 0x95, 0xfd, 0x4a, 0x6c, 0xb8, 0xc8, 0x06, 0x4c, 0xc0, 0xe0, 0x94, 0xd7, 0x78, 0x77, 0x0d, 0x50, 0xc5, 0x95, 0xa3, 0x57, 0x0f, 0x8d, 0x32, 0xaa, 0xc9, 0xbe, 0xa0, 0xb5, 0xc9,
                0x15, 0x95, 0x43, 0xe7, 0x04, 0x73, 0xf7, 0xe4, 0xcd, 0xbc, 0xde, 0xc9, 0xa9, 0xd1, 0xa0, 0x63, 0x06, 0x11, 0x7c, 0x2e, 0xde, 0xdd, 0x58, 0x06, 0xaf, 0x51, 0xff, 0x32, 0x0c, 0xc4, 0xd2, 0x73,
                0x60, 0x48, 0xd7, 0x08, 0x95, 0x5f, 0xe2, 0xae, 0xfc, 0xeb, 0x23, 0x98, 0x50, 0xa0, 0xfd, 0x91, 0xd7, 0x8f, 0x0f, 0xf3, 0x21, 0x3b, 0x17, 0x9f, 0xa8, 0xa0, 0xba, 0xd5, 0x5b, 0x6b, 0x02, 0xa6,
                0x84, 0x7a, 0xf1, 0x16, 0x4c, 0xd0, 0xdb, 0x02, 0x68, 0x6b, 0x76, 0x04, 0xca, 0x96, 0x9e, 0x46, 0xed, 0xc2, 0x0a, 0xba, 0x97, 0x9f, 0x3d, 0xdd, 0x3b, 0x19, 0x91, 0x95, 0xf3, 0x33, 0x18, 0x6a,
                0x9c, 0x34, 0x25, 0xba, 0x83, 0x2e, 0xa4, 0x6e, 0x11, 0x67, 0x12, 0x11, 0xe1, 0x8b, 0x94, 0xc1, 0xd9, 0x7b, 0x9f, 0x5a, 0x9a, 0x07, 0x6e, 0x9b, 0x88, 0xae, 0xc2, 0x45, 0x45, 0xf2, 0x11, 0xf6,
                0x73, 0x57, 0x02, 0x1e, 0x02, 0x8f, 0xcd, 0xcc, 0xf2, 0x99, 0x1e, 0x9e, 0xcb, 0x7c, 0x49, 0x4f, 0x32, 0x72, 0x23, 0xb9, 0xae, 0x68, 0xcc, 0x03, 0xbf, 0xbe, 0x24, 0xff, 0x4a, 0xc0, 0xb5, 0xa2,
                0x9d, 0x8f, 0xf8, 0x21, 0x9b, 0xca, 0x54, 0xaf, 0xe7, 0xf8, 0x78, 0x5c, 0xb7, 0x81, 0xb3, 0x11, 0x1a, 0xfa, 0x60, 0xab, 0xf4, 0xea, 0xff, 0xfe, 0x01, 0x11, 0xf4, 0x42, 0x31, 0xc6, 0x81, 0x0d,
                0x16, 0x43, 0xa1, 0xa3, 0x66, 0x3c, 0x20, 0x6a, 0x81, 0xa3, 0x57, 0xa8, 0xd9, 0xf5, 0x7a, 0xea, 0x9b, 0x9a, 0x5d, 0x02, 0x90, 0x73, 0x0a, 0xc6, 0x69, 0xdc, 0x00, 0xd2, 0xbf, 0x3a, 0x4d, 0x96,
                0x29, 0x26, 0x56, 0x9b, 0x12, 0xba, 0x4b, 0xcf, 0xf1, 0x0d, 0x72, 0xbe, 0x9d, 0x15, 0x12, 0x80, 0xdf, 0xac, 0x8c, 0xe2, 0xee, 0x0a, 0xea, 0xfc, 0xfb, 0x02, 0xdb, 0x39, 0x0b, 0x24, 0xfd, 0x56,
                0x83, 0xfc, 0x5a, 0x4e, 0x2f, 0x58, 0x02, 0x60, 0xbd, 0xab, 0xcf, 0xe5, 0xfa, 0xd0, 0x24, 0x2c, 0x93, 0xb9, 0x00, 0x4b, 0x70, 0xde, 0xec, 0x9c, 0x1d, 0xc9, 0x0f, 0x10, 0x74, 0x69, 0x84, 0xcc,
                0x30, 0xa4, 0x32, 0x66, 0xb9, 0x39, 0x91, 0xed, 0x26, 0x59, 0x7b, 0xe8, 0x00, 0x79, 0x34, 0x1c, 0xe9, 0x2b, 0xf4, 0x9d, 0x41, 0x45, 0x3c, 0xb2, 0x35, 0x93, 0x07, 0x90, 0x3d, 0xb8, 0x51, 0xb7,
                0xba, 0x19, 0x6b, 0x29, 0xc3, 0xce, 0xd8, 0x2f, 0xf8, 0x56, 0xae, 0x75, 0x5b, 0x91, 0x63, 0x54, 0x20, 0xbb, 0xcd, 0x4e, 0xfe, 0xba, 0x61, 0x69, 0x5d, 0x09, 0xe1, 0x6c, 0x6a, 0x4e, 0xd2, 0x07,
                0x04, 0x88, 0x04, 0xbe, 0xfb, 0xeb, 0xec, 0xb1, 0x2c, 0xee, 0x11, 0xec, 0x91, 0x80, 0x70, 0x80, 0x82, 0x1f, 0x31, 0xd2, 0xf9, 0x73, 0x48, 0xaa, 0x3a, 0xa6, 0x6a, 0x5b, 0x3d, 0x74, 0x99, 0xd6,
                0xbb, 0x1d, 0x98, 0x1d, 0x22, 0x0e, 0x99, 0x76, 0x1d, 0x4f, 0x14, 0xd2, 0xdc, 0x17, 0x68, 0xd6, 0x63, 0x7b, 0x29, 0xf8, 0x02, 0xd4, 0xcf, 0x70, 0xbf, 0x32, 0x67, 0x03, 0x52, 0x65, 0x0b, 0x5a,
                0xfb, 0x14, 0x4a, 0xce, 0xf7, 0xd3, 0xb4, 0x6d, 0x9b, 0xc9, 0x21, 0x63, 0x16, 0x22, 0xbd, 0x4b, 0xca, 0x5f, 0xc2, 0x9c, 0x27, 0xae, 0xa7, 0x56, 0x39, 0x82, 0xac, 0x43, 0xcc, 0x02, 0x38, 0x04,
                0xfc, 0x29, 0x30, 0xff, 0x51, 0x5b, 0xc0, 0x5f, 0x2b, 0x58, 0x07, 0x94, 0x8c, 0x23, 0x78, 0x23, 0x7d, 0x76, 0x85, 0x6b, 0x38, 0x1c, 0x86, 0xc0, 0xbc, 0x44, 0x2f, 0xeb, 0x7f, 0x4e, 0x88, 0x1f,
                0x31, 0x62, 0x5f, 0x63, 0x25, 0xba, 0x0c, 0xa5, 0x0b, 0xb9, 0x0e, 0xa5, 0x16, 0xf0, 0xdc, 0x14, 0x3f, 0xd1, 0x9c, 0xf6, 0xe7, 0x9f, 0xca, 0x5e, 0x25, 0x04, 0xb6, 0x5d, 0xcc, 0x1e, 0x95, 0x78,
                0xad, 0xa4, 0xf8, 0xde, 0x43, 0x37, 0x01, 0x60, 0x5c, 0xe0, 0xfa, 0x8b, 0x26, 0xe0, 0x9b, 0xc9, 0x91, 0xf3, 0x04, 0xaa, 0xc6, 0xba, 0x8a, 0x4f, 0x87, 0xb7, 0x48, 0xad, 0x9b, 0x13, 0xf8, 0x47,
                0x60, 0x21, 0x9d, 0x97, 0xa3, 0x47, 0x63, 0x03, 0xa1, 0xf8, 0xf4, 0x99, 0xbf, 0x43, 0x30, 0xfe, 0xaa, 0x7d, 0xb7, 0x8c, 0xe7, 0x55, 0xec, 0xa1, 0x5f, 0x4a, 0x6e, 0x51, 0xbb, 0xb0, 0xde, 0xa5,
                0xcf, 0xfa, 0xa2, 0x69, 0x34, 0x8b, 0xce, 0x19, 0x0b, 0x73, 0x30, 0xf1, 0x8e, 0x6c, 0xd1, 0x03, 0xfa, 0xe2, 0xc8, 0xc9, 0xd6, 0xc2, 0x18, 0x8d, 0xb9, 0xec, 0x18, 0x22, 0xd1, 0x1d, 0x45, 0x9f,
                0xac, 0xc1, 0xe0, 0xb0, 0x42, 0xea, 0x7a, 0x59, 0x40, 0x5c, 0x5c, 0xa9, 0xa8, 0xed, 0x9f, 0x8f, 0xdf, 0x71, 0x57, 0x12, 0xf1, 0xb8, 0x46, 0x74, 0xee, 0x4d, 0x50, 0x9a, 0x49, 0xc6, 0x6a, 0xd0
            }
        }
    };

    for (auto const& [keyAgreement, garbageKey] : garbageData) {
        Security::CipherSuite const cipherSuite{
            Security::ConfidentialityLevel::High, keyAgreement, test::CipherName, test::HashFunctionName
        };
    
        Security::Classical::FiniteFieldDiffieHellmanModel initiatorModel;
        auto initiatorKeyStore = [&] () -> Security::KeyStore {
            auto optPublicKey = initiatorModel.SetupKeyExchange(cipherSuite);
            EXPECT_TRUE(optPublicKey);
            return Security::KeyStore{ std::move(*optPublicKey) };
        }();

        Security::Classical::FiniteFieldDiffieHellmanModel acceptorModel;
        auto acceptorKeyStore = [&] () -> Security::KeyStore {
            auto optPublicKey = acceptorModel.SetupKeyExchange(cipherSuite);
            EXPECT_TRUE(optPublicKey);
            return Security::KeyStore{ std::move(*optPublicKey) };
        }();

        auto const initiatorDefaultSalt = initiatorKeyStore.GetSalt();
        auto const acceptorDefaultSalt = acceptorKeyStore.GetSalt();
    
        {
            initiatorKeyStore.SetPeerPublicKey(Security::PublicKey{ garbageKey });
            initiatorKeyStore.PrependSessionSalt(acceptorDefaultSalt);
        }

        {
            acceptorKeyStore.SetPeerPublicKey(Security::PublicKey{ initiatorKeyStore.GetPublicKey() });
            acceptorKeyStore.AppendSessionSalt(initiatorDefaultSalt);
        }

        auto const optInitiatorResult = initiatorModel.ComputeSharedSecret(*initiatorKeyStore.GetPeerPublicKey());
        ASSERT_FALSE(optInitiatorResult); // Technically there is a non-zero chance the garbage data has the correct encoding and passes this. 
    }
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, SynchronizeWithGarabageSupplementalDataTest)
{
    for (auto const& keyAgreement : Security::SupportedKeyAgreementNames) {
        if (local::IsFiniteFieldKeyAgreement(keyAgreement)) {
            Security::CipherSuite const cipherSuite{
                Security::ConfidentialityLevel::High, keyAgreement, test::CipherName, test::HashFunctionName
            };
    
            Security::Classical::FiniteFieldDiffieHellmanModel initiatorModel;
            auto initiatorKeyStore = [&] () -> Security::KeyStore {
                auto optPublicKey = initiatorModel.SetupKeyExchange(cipherSuite);
                EXPECT_TRUE(optPublicKey);
                return Security::KeyStore{ std::move(*optPublicKey) };
            }();

            Security::Classical::FiniteFieldDiffieHellmanModel acceptorModel;
            auto acceptorKeyStore = [&] () -> Security::KeyStore {
                auto optPublicKey = acceptorModel.SetupKeyExchange(cipherSuite);
                EXPECT_TRUE(optPublicKey);
                return Security::KeyStore{ std::move(*optPublicKey) };
            }();

            auto const initiatorDefaultSalt = initiatorKeyStore.GetSalt();
            auto const acceptorDefaultSalt = acceptorKeyStore.GetSalt();


            {
                initiatorKeyStore.SetPeerPublicKey(Security::PublicKey{ acceptorKeyStore.GetPublicKey() });
                initiatorKeyStore.PrependSessionSalt(acceptorDefaultSalt);
            }

            {
                acceptorKeyStore.SetPeerPublicKey(Security::PublicKey{ initiatorKeyStore.GetPublicKey() });
                acceptorKeyStore.AppendSessionSalt(initiatorDefaultSalt);
            }
            auto const supplementalData = Security::SupplementalData{ Security::Test::GenerateGarbageData(acceptorKeyStore.GetPublicKeySize()) };

            auto const optInitiatorResult = initiatorModel.ComputeSharedSecret(supplementalData);
            EXPECT_FALSE(optInitiatorResult);

            auto const optAcceptorResult = acceptorModel.ComputeSharedSecret(supplementalData);
            EXPECT_FALSE(optInitiatorResult);
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, SynchronizeWithInjectedInitiatorPublicKeyTest)
{
    for (auto const& keyAgreement : Security::SupportedKeyAgreementNames) {
        if (local::IsFiniteFieldKeyAgreement(keyAgreement)) {
            Security::CipherSuite const cipherSuite{
                Security::ConfidentialityLevel::High, keyAgreement, test::CipherName, test::HashFunctionName
            };
    
            Security::Classical::FiniteFieldDiffieHellmanModel initiatorModel;
            auto initiatorKeyStore = [&] () -> Security::KeyStore {
                auto optPublicKey = initiatorModel.SetupKeyExchange(cipherSuite);
                EXPECT_TRUE(optPublicKey);
                return Security::KeyStore{ std::move(*optPublicKey) };
            }();

            Security::Classical::FiniteFieldDiffieHellmanModel acceptorModel;
            auto acceptorKeyStore = [&] () -> Security::KeyStore {
                auto optPublicKey = acceptorModel.SetupKeyExchange(cipherSuite);
                EXPECT_TRUE(optPublicKey);
                return Security::KeyStore{ std::move(*optPublicKey) };
            }();

            Security::Classical::FiniteFieldDiffieHellmanModel injectingModel;
            auto injectorKeyStore = [&] () -> Security::KeyStore {
                auto optPublicKey = injectingModel.SetupKeyExchange(cipherSuite);
                EXPECT_TRUE(optPublicKey);
                return Security::KeyStore{ std::move(*optPublicKey) };
            }();

            auto const initiatorDefaultSalt = initiatorKeyStore.GetSalt();
            auto const injectorDefaultSalt = injectorKeyStore.GetSalt();
    
            {
                initiatorKeyStore.SetPeerPublicKey(Security::PublicKey{ injectorKeyStore.GetPublicKey() });
                initiatorKeyStore.PrependSessionSalt(injectorDefaultSalt);
            }

            {
                acceptorKeyStore.SetPeerPublicKey(Security::PublicKey{ initiatorKeyStore.GetPublicKey() });
                acceptorKeyStore.AppendSessionSalt(initiatorDefaultSalt);
            }

            auto const optInitiatorResult = initiatorModel.ComputeSharedSecret(*initiatorKeyStore.GetPeerPublicKey());
            ASSERT_TRUE(optInitiatorResult);

            auto const& [initiatorSharedSecret, initiatorSupplementalData] = *optInitiatorResult;
            EXPECT_FALSE(initiatorSharedSecret.IsEmpty());
            EXPECT_TRUE(initiatorSupplementalData.IsEmpty());

            auto const optAcceptorResult = acceptorModel.ComputeSharedSecret(*acceptorKeyStore.GetPeerPublicKey());
            ASSERT_TRUE(optInitiatorResult);

            auto const& [acceptorSharedSecret, acceptorSupplementalData] = *optAcceptorResult;
            EXPECT_FALSE(acceptorSharedSecret.IsEmpty());
            EXPECT_TRUE(acceptorSupplementalData.IsEmpty());

            // If the model uses a public key that has been altered, the resulting shared secret should not be the same. 
            EXPECT_NE(initiatorSharedSecret, acceptorSharedSecret);

            auto const optInitiatorVerificationData = initiatorKeyStore.GenerateSessionKeys(
                Security::ExchangeRole::Initiator, cipherSuite, initiatorSharedSecret);
            ASSERT_TRUE(optInitiatorVerificationData);
            EXPECT_TRUE(initiatorKeyStore.HasGeneratedKeys());

            auto const optAcceptorVerificationData = acceptorKeyStore.GenerateSessionKeys(
                Security::ExchangeRole::Acceptor, cipherSuite, acceptorSharedSecret);
            ASSERT_TRUE(optAcceptorVerificationData);
            EXPECT_TRUE(acceptorKeyStore.HasGeneratedKeys());

            // Using a shared secret that differs should result in keys that don't match. 
            EXPECT_NE(*optInitiatorVerificationData, *optAcceptorVerificationData);

            EXPECT_EQ(initiatorKeyStore.GetPublicKey(), acceptorKeyStore.GetPeerPublicKey());
            EXPECT_NE(initiatorKeyStore.GetPeerPublicKey(), acceptorKeyStore.GetPublicKey());
            EXPECT_NE(initiatorKeyStore.GetContentKey(), acceptorKeyStore.GetPeerContentKey());
            EXPECT_NE(initiatorKeyStore.GetPeerContentKey(), acceptorKeyStore.GetContentKey());
            EXPECT_NE(initiatorKeyStore.GetSignatureKey(), acceptorKeyStore.GetPeerSignatureKey());
            EXPECT_NE(initiatorKeyStore.GetPeerSignatureKey(), acceptorKeyStore.GetSignatureKey());
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------

TEST(FiniteFieldSynchronizerSuite, SynchronizeWithInjectedAcceptorPublicKeyTest)
{
    for (auto const& keyAgreement : Security::SupportedKeyAgreementNames) {
        if (local::IsFiniteFieldKeyAgreement(keyAgreement)) {
            Security::CipherSuite const cipherSuite{
                Security::ConfidentialityLevel::High, keyAgreement, test::CipherName, test::HashFunctionName
            };
    
            Security::Classical::FiniteFieldDiffieHellmanModel initiatorModel;
            auto initiatorKeyStore = [&] () -> Security::KeyStore {
                auto optPublicKey = initiatorModel.SetupKeyExchange(cipherSuite);
                EXPECT_TRUE(optPublicKey);
                return Security::KeyStore{ std::move(*optPublicKey) };
            }();

            Security::Classical::FiniteFieldDiffieHellmanModel acceptorModel;
            auto acceptorKeyStore = [&] () -> Security::KeyStore {
                auto optPublicKey = acceptorModel.SetupKeyExchange(cipherSuite);
                EXPECT_TRUE(optPublicKey);
                return Security::KeyStore{ std::move(*optPublicKey) };
            }();

            Security::Classical::FiniteFieldDiffieHellmanModel injectingModel;
            auto injectorKeyStore = [&] () -> Security::KeyStore {
                auto optPublicKey = injectingModel.SetupKeyExchange(cipherSuite);
                EXPECT_TRUE(optPublicKey);
                return Security::KeyStore{ std::move(*optPublicKey) };
            }();

            auto const acceptorDefaultSalt = acceptorKeyStore.GetSalt();
            auto const injectorDefaultSalt = injectorKeyStore.GetSalt();

            {
                initiatorKeyStore.SetPeerPublicKey(Security::PublicKey{ acceptorKeyStore.GetPublicKey() });
                initiatorKeyStore.PrependSessionSalt(acceptorDefaultSalt);
            }

            {
                acceptorKeyStore.SetPeerPublicKey(Security::PublicKey{ injectorKeyStore.GetPublicKey() });
                acceptorKeyStore.AppendSessionSalt(injectorDefaultSalt);
            }

            auto const optInitiatorResult = initiatorModel.ComputeSharedSecret(*initiatorKeyStore.GetPeerPublicKey());
            ASSERT_TRUE(optInitiatorResult);

            auto const& [initiatorSharedSecret, initiatorSupplementalData] = *optInitiatorResult;
            EXPECT_FALSE(initiatorSharedSecret.IsEmpty());
            EXPECT_TRUE(initiatorSupplementalData.IsEmpty());

            auto const optAcceptorResult = acceptorModel.ComputeSharedSecret(*acceptorKeyStore.GetPeerPublicKey());
            ASSERT_TRUE(optInitiatorResult);

            auto const& [acceptorSharedSecret, acceptorSupplementalData] = *optAcceptorResult;
            EXPECT_FALSE(acceptorSharedSecret.IsEmpty());
            EXPECT_TRUE(acceptorSupplementalData.IsEmpty());

            // If the model uses a public key that has been altered, the resulting shared secret should not be the same. 
            EXPECT_NE(initiatorSharedSecret, acceptorSharedSecret);

            auto const optInitiatorVerificationData = initiatorKeyStore.GenerateSessionKeys(
                Security::ExchangeRole::Initiator, cipherSuite, initiatorSharedSecret);
            ASSERT_TRUE(optInitiatorVerificationData);
            EXPECT_TRUE(initiatorKeyStore.HasGeneratedKeys());

            auto const optAcceptorVerificationData = acceptorKeyStore.GenerateSessionKeys(
                Security::ExchangeRole::Acceptor, cipherSuite, acceptorSharedSecret);
            ASSERT_TRUE(optAcceptorVerificationData);
            EXPECT_TRUE(acceptorKeyStore.HasGeneratedKeys());

            // Using a shared secret that differs should result in keys that don't match. 
            EXPECT_NE(*optInitiatorVerificationData, *optAcceptorVerificationData);

            EXPECT_NE(initiatorKeyStore.GetPublicKey(), acceptorKeyStore.GetPeerPublicKey());
            EXPECT_EQ(initiatorKeyStore.GetPeerPublicKey(), acceptorKeyStore.GetPublicKey());
            EXPECT_NE(initiatorKeyStore.GetContentKey(), acceptorKeyStore.GetPeerContentKey());
            EXPECT_NE(initiatorKeyStore.GetPeerContentKey(), acceptorKeyStore.GetContentKey());
            EXPECT_NE(initiatorKeyStore.GetSignatureKey(), acceptorKeyStore.GetPeerSignatureKey());
            EXPECT_NE(initiatorKeyStore.GetPeerSignatureKey(), acceptorKeyStore.GetSignatureKey());
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------

bool local::IsFiniteFieldKeyAgreement(std::string const& keyAgreement)
{
    return keyAgreement.starts_with("ffdhe-");
}

//----------------------------------------------------------------------------------------------------------------------
