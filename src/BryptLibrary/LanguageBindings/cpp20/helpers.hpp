//----------------------------------------------------------------------------------------------------------------------
// Description: C++20 language bindings for the Brypt Shared Library C Interface.
//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <brypt/brypt.h>
//----------------------------------------------------------------------------------------------------------------------
#include <chrono>
#include <concepts>
#include <cstdint>
#include <span>
#include <string_view>
#include <type_traits>
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
namespace brypt::helpers {
//----------------------------------------------------------------------------------------------------------------------

[[nodiscard]] std::span<std::uint8_t const> marshall(std::string_view payload);
[[nodiscard]] std::string_view to_string_view(std::span<std::uint8_t const> payload);

//----------------------------------------------------------------------------------------------------------------------
} // brypt::helpers namespace
//----------------------------------------------------------------------------------------------------------------------

inline std::span<std::uint8_t const> brypt::helpers::marshall(std::string_view payload)
{
    return std::span<uint8_t const>{
        reinterpret_cast<std::uint8_t const*>(payload.data()), payload.size()
    };
}

//----------------------------------------------------------------------------------------------------------------------

inline std::string_view brypt::helpers::to_string_view(std::span<std::uint8_t const> payload)
{
    return std::string_view{
        reinterpret_cast<char const*>(payload.data()), payload.size()
    };
}

//----------------------------------------------------------------------------------------------------------------------
